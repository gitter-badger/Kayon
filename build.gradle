/*
 * Kayon
 * Copyright (C) 2015 Ruben Anders
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

def prop = { System.getenv(it) ?: System.getProperty(it) }
project.ext.circleCI = prop('CIRCLECI') == 'true'
project.ext.circleCIArtifacts = prop('CIRCLE_ARTIFACTS')
project.ext.circleCIBuildNum = prop('CIRCLE_BUILD_NUM')
project.ext.circleCIKayonBotPassword = prop('KAYONBOT_PASSWORD')
project.ext.circleCIKayonBotAccessToken = prop('KAYONBOT_ACCESS_TOKEN')
project.ext.circleCISha1 = prop('CIRCLE_SHA1')
project.ext.ver = project(':KayonCore').file('src/main/resources/version').getText('utf8').replaceAll("[\n\r]", "")

subprojects {
    apply plugin: 'java'
    group 'cf.kayon'
    version = rootProject.ext.ver

    repositories { jcenter() }
    tasks.withType(JavaCompile) {
        options.encoding = 'utf8'
    }

    if (rootProject.ext.circleCI) {
        task copyCiArtifacts(type: Copy) {
            from("$buildDir/libs") {
                include 'Kayon*.jar'
            }
            from("$buildDir/distributions/") {
                include 'Kayon*.zip'
            }

            into rootProject.ext.circleCIArtifacts
        }
    }

    def buildOptionsString = { String... links ->
        StringBuilder stringBuilder = new StringBuilder(links.length * 32)
        for (int i = 0; i < links.length; i++) {
            stringBuilder.append(links[i])
            if (i + 1 < links.length)
                stringBuilder.append("' -link '")
        }
        return stringBuilder.toString()
    }

    tasks.withType(Javadoc) {
        options.addStringOption('link', buildOptionsString(
                'https://cdn.rawgit.com/google/guava/036db99cc2d8cee83de0f07ca0664b522fbbeaca/_releases/18.0/api/docs/',
                'https://docs.oracle.com/javase/8/docs/api/',
                'https://docs.oracle.com/javase/8/javafx/api/',
                'https://typesafehub.github.io/config/latest/api/'))
        options.addStringOption('encoding', 'utf8')
        options.addStringOption('docencoding', 'utf8')
        options.addStringOption('charset', 'utf8')
        options.showFromPrivate()
    }

    tasks.withType(Test) {
        workingDir = "$buildDir/test-results/working-dir"
        doFirst { workingDir.mkdirs() }
        systemProperty 'file.encoding', 'utf8'
    }


    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        classifier 'sources'
        group 'build'
    }

    artifacts {
        archives sourcesJar
    }

    def versionForFiles = project.version + '-b' + rootProject.ext.circleCIBuildNum
    def c = { version = versionForFiles }
    afterEvaluate { project ->
        project.tasks.withType(Jar, c)
        project.tasks.withType(Zip, c)
        project.tasks.withType(Tar, c)
    }
}
