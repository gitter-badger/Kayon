// Configures the database access
database {
  // Represents the url as accepted by DriverManager.getConnection(String url, Properties info)
  // To use another driver than H2, the user must add its driver jar to the classpath and possibly recompile the project
  // with adjusted SQL strings.
  // Any H2 database will work out of the box (remote, in-memory, embedded).
  // See http://www.h2database.com/html/features.html#database_url for useful information about valid URLs.
  url: "jdbc:h2:./database"

  // Represents the java.util.Properties object accepted by DriverManager.getConnection(String url, Properties info)
  info {
    user: null
    password: null
  }

  // Configures the logging when connecting to the database.
  log {
    // 0: Show password in plain text in log
    // 1: Show hash of password in log
    // 2: Don't show anything relevant to the acutual password, print a replacement instead
    // If you specify any other value, application startup will fail
    mode: 1

    // IF USING MODE 1, THESE ARE EFFECTIVE
    // The algorithm to use.
    // See https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#MessageDigest for possible algorithms
    algorithm: SHA-256

    // The charset to use to convert a string to bytes for hashing.
    // See https://docs.oracle.com/javase/8/docs/technotes/guides/intl/encoding.doc.html ("Canonical Name for java.nio API" column) for possible charsets
    charset: utf8

    // IF USING MODE 2, THIS IS EFFECTIVE
    // The replacement string to print instead of the password.
    replacement: (omitted)
  }

  statements {
    insert: "MERGE INTO NOUNS VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);"
    // Thanks http://stackoverflow.com/a/20834505/4464702
    query: """SELECT * FROM NOUNS WHERE
              CONCAT_WS('|', `NOMSG`, `GENSG`, `DATSG`, `ACCSG`, `ABLSG`, `VOCSG`, `NOMPL`, `GENPL`, `DATPL`, `ACCPL`, `ABLPL`, `VOCPL`,
              `NOMSGDEF`, `GENSGDEF`, `DATSGDEF`, `ACCSGDEF`, `ABLSGDEF`, `VOCSGDEF`, `NOMPLDEF`, `GENPLDEF`, `DATPLDEF`, `ACCPLDEF`, `ABLPLDEF`, `VOCPLDEF`)
              REGEXP ?;"""
    setup: """CREATE TABLE IF NOT EXISTS NOUNS (
              ROOTWORD VARCHAR NOT NULL,
              UUID UUID PRIMARY KEY,
              GENDER TINYINT NOT NULL,
              NOUNDECLENSION VARCHAR,
              TRANSLATIONS OTHER NOT NULL,
              NOMSG VARCHAR, GENSG VARCHAR, DATSG VARCHAR, ACCSG VARCHAR, ABLSG VARCHAR, VOCSG VARCHAR,
              NOMPL VARCHAR, GENPL VARCHAR, DATPL VARCHAR, ACCPL VARCHAR, ABLPL VARCHAR, VOCPL VARCHAR,
              NOMSGDEF VARCHAR, GENSGDEF VARCHAR, DATSGDEF VARCHAR, ACCSGDEF VARCHAR, ABLSGDEF VARCHAR, VOCSGDEF VARCHAR,
              NOMPLDEF VARCHAR, GENPLDEF VARCHAR, DATPLDEF VARCHAR, ACCPLDEF VARCHAR, ABLPLDEF VARCHAR, VOCPLDEF VARCHAR);"""
  }
}

gui {
  executor {
    poolSize: 4
    keepAliveTime: 10s
  }
}

debug {
  gui {
    startupException = false
  }
}
