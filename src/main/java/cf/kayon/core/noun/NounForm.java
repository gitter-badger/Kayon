//package com.kayon.core.noun;

//region Enum implementation
//public enum NounForm {
//    //region All possible combinations of Case, Count and Gender
//    NOMINATIVE_SINGULAR_MASCULINE(Case.NOMINATIVE, Count.SINGULAR, Gender.MASCULINE),
//    GENITIVE_SINGULAR_MASCULINE(Case.GENITIVE, Count.SINGULAR, Gender.MASCULINE),
//    DATIVE_SINGULAR_MASCULINE(Case.DATIVE, Count.SINGULAR, Gender.MASCULINE),
//    ACCUSATIVE_SINGULAR_MASCULINE(Case.ACCUSATIVE, Count.SINGULAR, Gender.MASCULINE),
//    ABLATIVE_SINGULAR_MASCULINE(Case.ABLATIVE, Count.SINGULAR, Gender.MASCULINE),
//    VOCATIVE_SINGULAR_MASCULINE(Case.VOCATIVE, Count.SINGULAR, Gender.MASCULINE),
//
//    NOMINATIVE_SINGULAR_FEMININE(Case.NOMINATIVE, Count.SINGULAR, Gender.FEMININE),
//    GENITIVE_SINGULAR_FEMININE(Case.GENITIVE, Count.SINGULAR, Gender.FEMININE),
//    DATIVE_SINGULAR_FEMININE(Case.DATIVE, Count.SINGULAR, Gender.FEMININE),
//    ACCUSATIVE_SINGULAR_FEMININE(Case.ACCUSATIVE, Count.SINGULAR, Gender.FEMININE),
//    ABLATIVE_SINGULAR_FEMININE(Case.ABLATIVE, Count.SINGULAR, Gender.FEMININE),
//    VOCATIVE_SINGULAR_FEMININE(Case.VOCATIVE, Count.SINGULAR, Gender.FEMININE),
//
//    NOMINATIVE_SINGULAR_NEUTER(Case.NOMINATIVE, Count.SINGULAR, Gender.NEUTER),
//    GENITIVE_SINGULAR_NEUTER(Case.GENITIVE, Count.SINGULAR, Gender.NEUTER),
//    DATIVE_SINGULAR_NEUTER(Case.DATIVE, Count.SINGULAR, Gender.NEUTER),
//    ACCUSATIVE_SINGULAR_NEUTER(Case.ACCUSATIVE, Count.SINGULAR, Gender.NEUTER),
//    ABLATIVE_SINGULAR_NEUTER(Case.ABLATIVE, Count.SINGULAR, Gender.NEUTER),
//    VOCATIVE_SINGULAR_NEUTER(Case.VOCATIVE, Count.SINGULAR, Gender.NEUTER),
//
//
//    NOMINATIVE_PLURAL_MASCULINE(Case.NOMINATIVE, Count.PLURAL, Gender.MASCULINE),
//    GENITIVE_PLURAL_MASCULINE(Case.GENITIVE, Count.PLURAL, Gender.MASCULINE),
//    DATIVE_PLURAL_MASCULINE(Case.DATIVE, Count.PLURAL, Gender.MASCULINE),
//    ACCUSATIVE_PLURAL_MASCULINE(Case.ACCUSATIVE, Count.PLURAL, Gender.MASCULINE),
//    ABLATIVE_PLURAL_MASCULINE(Case.ABLATIVE, Count.PLURAL, Gender.MASCULINE),
//    VOCATIVE_PLURAL_MASCULINE(Case.VOCATIVE, Count.PLURAL, Gender.MASCULINE),
//
//    NOMINATIVE_PLURAL_FEMININE(Case.NOMINATIVE, Count.PLURAL, Gender.FEMININE),
//    GENITIVE_PLURAL_FEMININE(Case.GENITIVE, Count.PLURAL, Gender.FEMININE),
//    DATIVE_PLURAL_FEMININE(Case.DATIVE, Count.PLURAL, Gender.FEMININE),
//    ACCUSATIVE_PLURAL_FEMININE(Case.ACCUSATIVE, Count.PLURAL, Gender.FEMININE),
//    ABLATIVE_PLURAL_FEMININE(Case.ABLATIVE, Count.PLURAL, Gender.FEMININE),
//    VOCATIVE_PLURAL_FEMININE(Case.VOCATIVE, Count.PLURAL, Gender.FEMININE),
//
//    NOMINATIVE_PLURAL_NEUTER(Case.NOMINATIVE, Count.PLURAL, Gender.NEUTER),
//    GENITIVE_PLURAL_NEUTER(Case.GENITIVE, Count.PLURAL, Gender.NEUTER),
//    DATIVE_PLURAL_NEUTER(Case.DATIVE, Count.PLURAL, Gender.NEUTER),
//    ACCUSATIVE_PLURAL_NEUTER(Case.ACCUSATIVE, Count.PLURAL, Gender.NEUTER),
//    ABLATIVE_PLURAL_NEUTER(Case.ABLATIVE, Count.PLURAL, Gender.NEUTER),
//    VOCATIVE_PLURAL_NEUTER(Case.VOCATIVE, Count.PLURAL, Gender.NEUTER);
//    //end NO region
//
//    private final Case caze;
//    private final Count number;
//    private final Gender gender;
//
//    NounForm(Case caze, Count number, Gender gender) {
//        this.caze = caze;
//        this.number = number;
//        this.gender = gender;
//   }
//endregion
