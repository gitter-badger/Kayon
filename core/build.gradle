/*
 * Kayon
 * Copyright (C) 2015 Ruben Anders
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import com.google.common.io.ByteStreams
import groovy.json.JsonSlurper

dependencies {
    compile 'ch.qos.logback:logback-classic:1.1.3'
    compile 'org.apache.commons:commons-collections4:4.0'
    compile 'org.jetbrains:annotations:15.0'
    compile 'com.google.guava:guava:18.0' // Change version in doc link as well
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'commons-io:commons-io:2.4'
    compile 'com.h2database:h2:1.4.190'
    compile 'com.typesafe:config:1.3.0' // Same as for guava
    compile 'commons-codec:commons-codec:1.10'
    compile 'net.jcip:jcip-annotations:1.0'
//    compile fileTree(dir: 'libs', include: '*.jar')

    testCompile 'junit:junit:4.7'
    testCompile 'com.github.stefanbirkner:fishbowl:1.3.0'
}

buildscript {
    repositories { jcenter() }
    dependencies { classpath 'com.google.guava:guava:18.0' }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier 'javadoc'
    group 'build'
}

artifacts {
    archives javadocJar
}

if (rootProject.ext.circleCI) {
    file('src/main/resources/build').write(rootProject.ext.circleCIBuildNum)

    // This task is in the core only (because the GUI mostly does not have Javadoc)
    task deployJavadoc(dependsOn: tasks.javadoc) << { // double shift because closure is what is running the task, not configuring it
        def directory = file("$buildDir/doc-repo/")
        directory.mkdirs()
        def cmde = { Map<String, String> env, String... cmds ->
            ProcessBuilder builder = new ProcessBuilder(cmds)
            builder.directory(directory) // execute in repo directory
            builder.redirectErrorStream(true);
            builder.environment().putAll(env)
            Process process = builder.start()
            ByteStreams.nullOutputStream() << process.getInputStream() // http://stackoverflow.com/a/3285479/4464702 and http://stackoverflow.com/a/10708117/4464702
            process.waitFor()
        }
        def cmd = { String... cmds ->
            cmde([] as Map<String, String>, cmds)
        }

        cmd('git', 'clone', '-b', 'gh-pages', "https://KayonBot:${rootProject.ext.circleCIKayonBotPassword}@github.com/RAnders00/KayonDoc.git", '.')
        cmd('git', 'rm', '-rf', '.')
        cmd('git', 'checkout', 'HEAD', '--', 'README.md')

        copy {
            from tasks.javadoc.destinationDir
            into directory
        }

        cmd('git', 'add', '-A')

        def json = new JsonSlurper().parseText(new URL(
                "https://api.github.com/repos/RAnders00/Kayon/git/commits/${rootProject.ext.circleCISha1}?access_token=${rootProject.ext.circleCIKayonBotAccessToken}"
        ).text)
        def message = "[#${rootProject.ext.circleCIBuildNum}] $json.message\nBuild URL: https://circleci.com/gh/RAnders00/Kayon/${rootProject.ext.circleCIBuildNum}"
        // http://stackoverflow.com/a/23108169/4464702 and http://jasonnoble.org/2009/04/github-set-authorcommitter.html
        file("$buildDir/doc-repo-commitmsg").write(message)
        cmde([GIT_COMMITTER_NAME: 'KayonBot', GIT_COMMITTER_EMAIL: 'rubenanders@hotmail.de', GIT_AUTHOR_NAME: json.author.name, GIT_AUTHOR_EMAIL: json.author.email],
                'git', 'commit',
                '-m', "[#${rootProject.ext.circleCIBuildNum}] $json.message",
                '-m', "Build URL: https://circleci.com/gh/RAnders00/Kayon/${rootProject.ext.circleCIBuildNum}")

        if (System.getProperty('NODEPLOY') != 'true')
            cmd('git', 'push', 'origin', 'gh-pages')
    }
}
